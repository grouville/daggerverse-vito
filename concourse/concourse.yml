display:
  background_image: https://storage.googleapis.com/concourse-media-assets/concourse-emi-background-clean.png

resource_types:
- name: gcs
  type: registry-image
  source: {repository: frodenas/gcs-resource}

- name: bosh-release
  type: registry-image
  source: {repository: dpb587/bosh-release-resource}

- name: bosh-deployment
  type: registry-image
  source: {repository: cloudfoundry/bosh-deployment-resource}

- name: slack-notifier
  type: registry-image
  source: {repository: mockersf/concourse-slack-notifier}

- name: helm-chart
  type: registry-image
  source: {repository: linkyard/helm-chart-resource, tag: 2.17.0}

- name: registry-image
  type: registry-image
  source: {repository: concourse/registry-image-resource, tag: dev}

groups:
- name: develop
  jobs:
  - unit
  - integration
  - testflight
  - worker-runtime
  - watsjs
  - build-concourse
  - check-docker-mounts

- name: images
  jobs:
  - unit-image

- name: all
  jobs:
  - "*"

jobs:
- name: unit
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      trigger: true
    - get: unit-image
      trigger: true
    - get: ci
  - task: yarn-test
    image: unit-image
    file: ci/tasks/yarn-test.yml
  - in_parallel:
    - task: unit
      image: unit-image
      file: ci/tasks/unit.yml
      input_mapping: {concourse: built-concourse}
    - task: unit-baggageclaim
      image: unit-image
      file: ci/tasks/unit-baggageclaim.yml
      privileged: true
      input_mapping: {concourse: built-concourse}

- name: unit-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: ci
      resource: ci-unit-image
      trigger: true
    - get: oci-build-task
    - get: golang-builder-image
      trigger: true
      params: {format: oci}
  - task: build
    image: oci-build-task
    privileged: true
    config:
      platform: linux
      params:
        CONTEXT: ci/dockerfiles/unit
        IMAGE_ARG_base_image: golang-builder-image/image.tar
      inputs: [{name: ci}, {name: golang-builder-image}]
      outputs: [{name: image}]
      caches: [{path: cache}]
      run: {path: build}
  - put: unit-image
    params: {image: image/image.tar}

- name: worker-runtime
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit]
      trigger: true
    - get: dev-image
      trigger: true
    - get: ci
  - task: integration
    image: dev-image
    privileged: true
    timeout: 1h
    file: ci/tasks/containerd-integration.yml

- name: check-docker-mounts
  public: true
  max_in_flight: 1
  plan:
    - get: concourse
      passed: [unit]
      trigger: true
    - get: unit-image
    - get: ci
    - task: docker-mounts
      image: unit-image
      privileged: true
      file: ci/tasks/docker-mounts.yml

- name: testflight
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit]
      trigger: true
    - get: unit-image
    - get: dev-image
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: postgres-image-legacy
      params: {format: oci}
    - get: ci
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: all
    - var: postgres-image
      values:
      - postgres-image
      - postgres-image-legacy
      max_in_flight: all
    task: testflight
    image: unit-image
    privileged: true
    params:
      RUNTIME: ((.:runtime))
    file: ci/tasks/docker-compose-testflight.yml
    input_mapping: {postgres-image: ((.:postgres-image))}

- name: watsjs
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit]
      trigger: true
    - get: unit-image
    - get: dev-image
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: watsjs
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-watsjs.yml

- name: integration
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit]
      trigger: true
    - get: dev-image
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: vault-image
      params: {format: oci}
    - get: ci
  - task: integration
    privileged: true
    image: unit-image
    file: ci/tasks/integration.yml

- name: build-concourse
  old_name: build-rc
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [testflight, watsjs, integration, worker-runtime]
      trigger: true
    - get: unit-image
    - get: dev-image
      trigger: true
    - get: golang-builder-image
    - get: ci
    - get: resource-types-ubuntu-image
  - in_parallel:
    - task: fly-linux
      file: ci/tasks/fly-build-linux.yml
      image: golang-builder-image
  - in_parallel:
      fail_fast: true
      steps:
        - task: hoist-linux-dependencies
          file: ci/tasks/hoist-linux-dependencies.yml
          image: dev-image
        - task: hoist-resource-types-ubuntu
          file: ci/tasks/hoist-linux-resource-types.yml
          image: resource-types-ubuntu-image
          output_mapping: {resource-types: resource-types-ubuntu}
        - task: yarn-build
          file: ci/tasks/yarn-build.yml
          image: unit-image
  - task: get-dev-version
    file: ci/tasks/get-dev-version.yml
    image: golang-builder-image
  - in_parallel:
      fail_fast: true
      steps:
      - task: concourse-linux-ubuntu
        image: golang-builder-image
        params: {PLATFORM: linux, VARIANT: ubuntu}
        file: ci/tasks/concourse-build-linux.yml
        input_mapping: {concourse: built-concourse, resource-types: resource-types-ubuntu}
        output_mapping: {concourse-tarball: concourse-linux-ubuntu}

resources:
- name: concourse
  type: git
  icon: &git-icon github
  source:
    uri: https://github.com/concourse/concourse.git
    branch: master

- name: ci
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/ci.git
    branch: master

- name: ci-unit-image
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/ci.git
    branch: master
    paths:
    - dockerfiles/unit

- name: dev-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/dev
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

- name: concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

- name: unit-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/unit
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

- name: golang-builder-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/golang-builder
    username: ((docker.username))
    password: ((docker.password))
    variant: jammy

- name: postgres-image
  type: registry-image
  icon: *image-icon
  source: {repository: postgres}

- name: postgres-image-legacy
  type: registry-image
  icon: *image-icon
  source: {repository: postgres, tag: 11}

- name: vault-image
  type: registry-image
  icon: *image-icon
  source: {repository: vault}

- name: oci-build-task
  type: registry-image
  icon: *image-icon
  source: {repository: concourse/oci-build-task}

- name: resource-types-ubuntu-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/resource-types
    tag: ubuntu
    username: ((docker.username))
    password: ((docker.password))
